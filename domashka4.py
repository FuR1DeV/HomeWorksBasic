# Домашка 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В
# расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для
# конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv  # Я так понимаю проверка должны быть только через cmd ? На всякий пожарный я закинул отдельный
# файл zp.py

script_name, first_param, second_param, third_param = argv

four_param = int(first_param) * int(second_param) + int(third_param)

print("Имя скрипта: ", script_name)
print("Выработка в часах: ", first_param)
print("Ставка в час: ", second_param)
print("Ваша премия: ", third_param)
print("Ваша заработная плата ", four_param)

# Домашка 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущего элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка
# использовать генератор. Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. Результат: [12,
# 44, 4, 10, 78, 123].

a = [250, 1, 22, 34, 34, 34, 7, 23, 22, 12, 29, 444, 2, 32, 55]
print(f"Исходный список = {a}")
print(f"Значения больше предыдущего = {[a[i] for i in range(1, len(a)) if a[i - 1] < a[i]]}")

# Домашка 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну
# строку. Подсказка: использовать функцию range() и генератор.

print(f"Числа кратные 20 и 21 = {[i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]}")

# Домашка 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый
# массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для
# выполнения задания обязательно использовать генератор. Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2,
# 10, 7, 4, 11]. Результат: [23, 1, 3, 10, 4, 11]

a = [3, 3, 3, 8, 24, 2, 45, 45, 4, 5, 11, 8, 5, 12]
print(f"Исходный список {a}")
print(f"Элементы списка не имеющие повторений {[i for i in a if a.count(i) == 1]}")

# Домашка 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны
# войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех
# элементов списка. Подсказка: использовать функцию reduce().

from functools import reduce


def my_func(el1, el2):
    return el1 * el2


print(f"Результат произведения всех четных чисел от 100 до 1000 = {reduce(my_func, [i for i in range(100, 1001, 2)])}")

# Домашка 6. Реализовать два небольших скрипта: а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый
# цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

# Итератор a)
from itertools import count

for el in count(1):
    if el > 7:
        break
    else:
        print(el)

# Итератор б)

from itertools import cycle

с = 0
l = [1, True, "itshik", [2020]]
for el in cycle(l):
    if с > 10:
        break
    print(el)
    с += 1


# Домашка 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При
# вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и
# до n!. Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4
# = 24.

def fact1(a):  # Я знаю что можно использовать библиотеку factorial, но я решил сделать цикл while.
    i = 1
    res = i
    while i <= a:
        res = res * i
        i += 1
    return res


def fact(n):
    for i in range(1, (n + 1)):
        yield fact1(i)


u = 0  # Счетчик для каждого факториала
n = 7  # Факториал числа 5
for el in fact(n):
    u += 1
    print("Факториал числа " + str(u) + " = " + str(el))  # Выводим факториалы начиная с 1 до 7
